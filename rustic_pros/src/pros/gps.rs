/* automatically generated by rust-bindgen 0.64.0 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 37;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct gps_status_s {
    #[doc = "< X Position (meters)"]
    pub x: f64,
    #[doc = "< Y Position (meters)"]
    pub y: f64,
    #[doc = "< Percieved Pitch based on GPS + IMU"]
    pub pitch: f64,
    #[doc = "< Percieved Roll based on GPS + IMU"]
    pub roll: f64,
    #[doc = "< Percieved Yaw based on GPS + IMU"]
    pub yaw: f64,
}
#[test]
fn bindgen_test_layout_gps_status_s() {
    const UNINIT: ::core::mem::MaybeUninit<gps_status_s> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<gps_status_s>(),
        40usize,
        concat!("Size of: ", stringify!(gps_status_s))
    );
    assert_eq!(
        ::core::mem::align_of::<gps_status_s>(),
        1usize,
        concat!("Alignment of ", stringify!(gps_status_s))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_status_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_status_s),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_status_s),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_status_s),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_status_s),
            "::",
            stringify!(yaw)
        )
    );
}
pub type gps_status_s_t = gps_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gps_raw_s {
    #[doc = "< Percieved Pitch based on GPS + IMU"]
    pub x: f64,
    #[doc = "< Percieved Roll based on GPS + IMU"]
    pub y: f64,
    #[doc = "< Percieved Yaw based on GPS + IMU"]
    pub z: f64,
}
#[test]
fn bindgen_test_layout_gps_raw_s() {
    const UNINIT: ::core::mem::MaybeUninit<gps_raw_s> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<gps_raw_s>(),
        24usize,
        concat!("Size of: ", stringify!(gps_raw_s))
    );
    assert_eq!(
        ::core::mem::align_of::<gps_raw_s>(),
        8usize,
        concat!("Alignment of ", stringify!(gps_raw_s))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_raw_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_raw_s),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gps_raw_s),
            "::",
            stringify!(z)
        )
    );
}
pub type gps_accel_s_t = gps_raw_s;
pub type gps_gyro_s_t = gps_raw_s;
extern "C" {
    #[doc = " Set the GPS's offset relative to the center of turning in meters,\n as well as its initial position.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n \\param  xOffset\n \t\t\t\t Cartesian 4-Quadrant X offset from center of turning (meters)\n \\param  yOffset\n \t\t\t\t Cartesian 4-Quadrant Y offset from center of turning (meters)\n \\param  xInitial\n \t\t\t\t Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters)\n \\param  yInitial\n \t\t\t\t Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters)\n \\param  headingInitial\n  \t\t\t Heading with 0 being north on the field, in degrees [0,360) going clockwise\n \\return 1 if the operation was successful or PROS_ERR if the operation\n failed, setting errno."]
    pub fn gps_initialize_full(
        port: u8,
        xInitial: f64,
        yInitial: f64,
        headingInitial: f64,
        xOffset: f64,
        yOffset: f64,
    ) -> i32;
}
extern "C" {
    #[doc = " Set the GPS's offset relative to the center of turning in meters.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n \\param  xOffset\n \t\t\t\t Cartesian 4-Quadrant X offset from center of turning (meters)\n \\param  yOffset\n \t\t\t\t Cartesian 4-Quadrant Y offset from center of turning (meters)\n \\return 1 if the operation was successful or PROS_ERR if the operation\n failed, setting errno."]
    pub fn gps_set_offset(port: u8, xOffset: f64, yOffset: f64) -> i32;
}
extern "C" {
    #[doc = " Get the GPS's location relative to the center of turning/origin in meters.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n \\param  xOffset\n \t\t\t\t Pointer to cartesian 4-Quadrant X offset from center of turning (meters)\n \\param  yOffset\n \t\t\t\t Pointer to cartesian 4-Quadrant Y offset from center of turning (meters)\n \\return 1 if the operation was successful or PROS_ERR if the operation\n failed, setting errno."]
    pub fn gps_get_offset(port: u8, xOffset: *mut f64, yOffset: *mut f64) -> i32;
}
extern "C" {
    #[doc = " Sets the robot's location relative to the center of the field in meters.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n \\param  xInitial\n \t\t\t\t Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters)\n \\param  yInitial\n \t\t\t\t Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters)\n \\param  headingInitial\n  \t\t\t Heading with 0 being north on the field, in degrees [0,360) going clockwise\n \\return 1 if the operation was successful or PROS_ERR if the operation\n failed, setting errno."]
    pub fn gps_set_position(port: u8, xInitial: f64, yInitial: f64, headingInitial: f64) -> i32;
}
extern "C" {
    #[doc = " Set the GPS sensor's data rate in milliseconds, only applies to IMU on GPS.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n \\param  rate\n \t\t\t\t Data rate in milliseconds (Minimum: 5 ms)\n \\return 1 if the operation was successful or PROS_ERR if the operation\n failed, setting errno."]
    pub fn gps_set_data_rate(port: u8, rate: u32) -> i32;
}
extern "C" {
    #[doc = " Get the possible RMS (Root Mean Squared) error in meters for GPS position.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n\n \\return Possible RMS (Root Mean Squared) error in meters for GPS position.\n If the operation failed, returns PROS_ERR_F and errno is set."]
    pub fn gps_get_error(port: u8) -> f64;
}
extern "C" {
    #[doc = " Gets the position and roll, yaw, and pitch of the GPS.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n\n \\return A struct (gps_status_s_t) containing values mentioned above.\n If the operation failed, all the structure's members are filled with\n PROS_ERR_F and errno is set."]
    pub fn gps_get_status(port: u8) -> gps_status_s_t;
}
extern "C" {
    #[doc = " Get the heading in [0,360) degree values.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n\n \\return The heading in [0,360) degree values. If the operation failed,\n returns PROS_ERR_F and errno is set."]
    pub fn gps_get_heading(port: u8) -> f64;
}
extern "C" {
    #[doc = " Get the heading in the max double value and min double value scale.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n\n \\return The heading in [DOUBLE_MIN, DOUBLE_MAX] values. If the operation\n fails, returns PROS_ERR_F and errno is set."]
    pub fn gps_get_heading_raw(port: u8) -> f64;
}
extern "C" {
    #[doc = " Gets the GPS sensor's elapsed rotation value\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n \\return The elased heading in degrees. If the operation fails, returns\n PROS_ERR_F and errno is set."]
    pub fn gps_get_rotation(port: u8) -> f64;
}
extern "C" {
    #[doc = " Set the GPS sensor's rotation value to target value\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n \\param  target\n \t\t\t\t Target rotation value to set rotation value to\n \\return 1 if the operation was successful or PROS_ERR if the operation\n failed, setting errno."]
    pub fn gps_set_rotation(port: u8, target: f64) -> i32;
}
extern "C" {
    #[doc = " Tare the GPS sensor's rotation value\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n \\return 1 if the operation was successful or PROS_ERR if the operation\n failed, setting errno."]
    pub fn gps_tare_rotation(port: u8) -> i32;
}
extern "C" {
    #[doc = " Get the GPS's raw gyroscope values\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS port number from 1-21\n \\return The raw gyroscope values. If the operation failed, all the\n structure's members are filled with PROS_ERR_F and errno is set."]
    pub fn gps_get_gyro_rate(port: u8) -> gps_gyro_s_t;
}
extern "C" {
    #[doc = " Get the GPS's raw accelerometer values\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as an GPS\n EAGAIN - The sensor is still calibrating\n\n \\param  port\n \t\t\t\t The V5 GPS's port number from 1-21\n \\return The raw accelerometer values. If the operation failed, all the\n structure's members are filled with PROS_ERR_F and errno is set."]
    pub fn gps_get_accel(port: u8) -> gps_accel_s_t;
}
