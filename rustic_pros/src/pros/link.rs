/* automatically generated by rust-bindgen 0.64.0 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 37;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const LINK_BUFFER_SIZE: u32 = 512;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const link_type_e_E_LINK_RECIEVER: link_type_e = 0;
pub const link_type_e_E_LINK_TRANSMITTER: link_type_e = 1;
pub const link_type_e_E_LINK_RX: link_type_e = 0;
pub const link_type_e_E_LINK_TX: link_type_e = 1;
pub type link_type_e = ::core::ffi::c_uint;
pub use self::link_type_e as link_type_e_t;
extern "C" {
    #[doc = " Initializes a link on a radio port, with an indicated type. There might be a\n 1 to 2 second delay from when this function is called to when the link is initializes.\n PROS currently only supports the use of one radio per brain.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n\n \\param port\n      The port of the radio for the intended link.\n \\param link_id\n      Unique link ID in the form of a string, needs to be different from other links in\n      the area.\n \\param type\n      Indicates whether the radio link on the brain is a transmitter or reciever,\n      with the transmitter having double the transmitting bandwidth as the recieving\n      end (1040 bytes/s vs 520 bytes/s).\n\n \\return PROS_ERR if initialization fails, 1 if the initialization succeeds."]
    pub fn link_init(port: u8, link_id: *const ::core::ffi::c_char, type_: link_type_e_t) -> u32;
}
extern "C" {
    #[doc = " Initializes a link on a radio port, with an indicated type and the ability for\n vexlink to override the controller radio. There might be a 1 to 2 second delay\n from when this function is called to when the link is initializes.\n PROS currently only supports the use of one radio per brain.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n\n \\param port\n      The port of the radio for the intended link.\n \\param link_id\n      Unique link ID in the form of a string, needs to be different from other links in\n      the area.\n \\param type\n      Indicates whether the radio link on the brain is a transmitter or reciever,\n      with the transmitter having double the transmitting bandwidth as the recieving\n      end (1040 bytes/s vs 520 bytes/s).\n\n \\return PROS_ERR if initialization fails, 1 if the initialization succeeds."]
    pub fn link_init_override(
        port: u8,
        link_id: *const ::core::ffi::c_char,
        type_: link_type_e_t,
    ) -> u32;
}
extern "C" {
    #[doc = " Checks if a radio link on a port is active or not.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n\n \\param port\n      The port of the radio for the intended link.\n\n \\return If a radio is connected to a port and it's connected to a link."]
    pub fn link_connected(port: u8) -> bool;
}
extern "C" {
    #[doc = " Returns the bytes of data available to be read\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n\n \\param port\n      The port of the radio for the intended link.\n\n \\return PROS_ERR if port is not a link/radio, else the bytes available to be\n read by the user."]
    pub fn link_raw_receivable_size(port: u8) -> u32;
}
extern "C" {
    #[doc = " Returns the bytes of data available in transmission buffer.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n\n \\param port\n      The port of the radio for the intended link.\n\n \\return PROS_ERR if port is not a link/radio,"]
    pub fn link_raw_transmittable_size(port: u8) -> u32;
}
extern "C" {
    #[doc = " Send raw serial data through vexlink.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no\n room in the FIFO buffer (queue) to transmit the data.\n EINVAL - The data given is NULL\n\n \\param port\n      The port of the radio for the intended link.\n \\param data\n      Buffer with data to send\n \\param data_size\n      Bytes of data to be read to the destination buffer\n\n \\return PROS_ERR if port is not a link, and the successfully transmitted\n data size if it succeeded."]
    pub fn link_transmit_raw(port: u8, data: *mut ::core::ffi::c_void, data_size: u16) -> u32;
}
extern "C" {
    #[doc = " Receive raw serial data through vexlink.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer\n or destination buffer.\n\n \\param port\n      The port of the radio for the intended link.\n \\param dest\n      Destination buffer to read data to\n \\param data_size\n      Bytes of data to be read to the destination buffer\n\n \\return PROS_ERR if port is not a link, and the successfully received\n data size if it succeeded."]
    pub fn link_receive_raw(port: u8, dest: *mut ::core::ffi::c_void, data_size: u16) -> u32;
}
extern "C" {
    #[doc = " Send packeted message through vexlink, with a checksum and start byte.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no\n room in the FIFO buffer (queue) to transmit the data.\n EINVAL - The data given is NULL\n\n \\param port\n      The port of the radio for the intended link.\n \\param data\n      Buffer with data to send\n \\param data_size\n      Bytes of data to be read to the destination buffer\n\n \\return PROS_ERR if port is not a link, and the successfully transmitted\n data size if it succeeded."]
    pub fn link_transmit(port: u8, data: *mut ::core::ffi::c_void, data_size: u16) -> u32;
}
extern "C" {
    #[doc = " Receive packeted message through vexlink, with a checksum and start byte.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer\n or destination buffer.\n EBADMSG - Protocol error related to start byte, data size, or checksum.\n\n \\param port\n      The port of the radio for the intended link.\n \\param dest\n      Destination buffer to read data to\n \\param data_size\n      Bytes of data to be read to the destination buffer\n\n \\return PROS_ERR if port is not a link or protocol error, and the successfully\n transmitted data size if it succeeded."]
    pub fn link_receive(port: u8, dest: *mut ::core::ffi::c_void, data_size: u16) -> u32;
}
extern "C" {
    #[doc = " Clear the receive buffer of the link, and discarding the data.\n\n This function uses the following values of errno when an error state is\n reached:\n ENXIO - The given value is not within the range of V5 ports (1-21).\n ENODEV - The port cannot be configured as a radio.\n ENXIO - The sensor is still calibrating, or no link is connected via the radio.\n\n \\param port\n      The port of the radio for the intended link.\n\n \\return PROS_ERR if port is not a link, and the successfully received\n data size if it succeeded."]
    pub fn link_clear_receive_buf(port: u8) -> u32;
}
